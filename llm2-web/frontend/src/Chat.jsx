import React, { useEffect, useRef } from 'react';
import ReactMarkdown from 'react-markdown'; // Import react-markdown

// Styles (assuming they are the same as the previous version)
const styles = {
  chatContainer: {
    display: 'flex',
    flexDirection: 'column',
    flexGrow: 1,
    overflowY: 'auto',
    padding: '10px',
  },
  messageEntry: {
    display: 'flex',
    flexDirection: 'column',
    marginBottom: '10px',
  },
  userEntry: {
    alignItems: 'flex-end',
  },
  assistantEntry: {
    alignItems: 'flex-start',
  },
  messageBubble: {
    maxWidth: '70%',
    padding: '10px 15px',
    borderRadius: '20px',
    wordWrap: 'break-word',
    fontSize: '0.9em',
    lineHeight: '1.4',
  },
  userMessage: {
    backgroundColor: '#007bff',
    color: 'white',
  },
  assistantMessage: {
    backgroundColor: '#e9e9eb',
    color: 'black',
  },
  senderName: {
    fontSize: '0.8em',
    color: '#555',
    marginBottom: '4px',
    paddingLeft: '5px',
    paddingRight: '5px',
  },
  // Style for markdown content, targeting elements generated by react-markdown
  markdownContent: {
    // Example: ensure paragraphs have no extra margin if bubble padding is enough
    p: {
      margin: 0,
    },
    // Add more specific styles for ul, ol, code, blockquote, etc. as needed
    ul: {
      paddingLeft: '20px',
      marginTop: '5px',
      marginBottom: '5px',
    },
    ol: {
      paddingLeft: '20px',
      marginTop: '5px',
      marginBottom: '5px',
    },
    code: { // Inline code
      backgroundColor: 'rgba(0,0,0,0.05)',
      padding: '2px 4px',
      borderRadius: '3px',
      fontFamily: 'monospace',
    },
    pre: { // Code blocks
      backgroundColor: 'rgba(0,0,0,0.05)',
      padding: '10px',
      borderRadius: '5px',
      overflowX: 'auto', // Scroll for long code lines
      fontFamily: 'monospace',
    }
  }
};

const Chat = ({ messages }) => {
  const chatEndRef = useRef(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  if (!messages || messages.length === 0) {
    return (
      <div style={styles.chatContainer}>
        <p style={{ textAlign: 'center', color: '#888', marginTop: '20px' }}>
          No hay mensajes aún. ¡Comienza la conversación!
        </p>
      </div>
    );
  }

  return (
    <div style={styles.chatContainer}>
      {messages.map((msg) => (
        <div
          key={msg.id}
          style={{
            ...styles.messageEntry,
            ...(msg.sender === 'user' ? styles.userEntry : styles.assistantEntry)
          }}
        >
          <div style={styles.senderName}>
            {msg.sender === 'user' ? 'Tú' : 'Asistente'}
          </div>
          <div
            style={{
              ...styles.messageBubble,
              ...(msg.sender === 'user' ? styles.userMessage : styles.assistantMessage),
            }}
          >
            {msg.isError ? (
              <span style={{ color: msg.sender === 'user' ? 'white' : '#d9534f' }}>{msg.text}</span>
            ) : msg.sender === 'assistant' ? (
              // Use ReactMarkdown for assistant messages
              // Apply styles.markdownContent to the container or pass components
              <div style={styles.markdownContent}>
                <ReactMarkdown>{msg.text}</ReactMarkdown>
              </div>
            ) : (
              // User messages as plain text
              msg.text
            )}
          </div>
        </div>
      ))}
      <div ref={chatEndRef} />
    </div>
  );
};

export default Chat;
